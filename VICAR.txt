SOFTWARE ORGANIZATION

****THIS DOCUMENT IS VERY OUT OF DATE AND HAS MANY ERRORS****

The vicar project software spans 2 directories; OpenSignin and Core.

OpenSignin enables the use of a user's Yahoo or Google ID for Signin. (For more information on OpenID, visit http://openid.net.)
Vicar's OpenSignin access uses the JOpenID library JOpenId-1.08.jar from http://code.google.com/p/jopenid/.  There are several others to choose from at http://openid.net/developers/libraries/ but this one seemed to be the easiest with which to get started, especially within a servlet or cocoon generator.  OpenSignin.java is based on some of their sample code.

Core implements the rest of the website.  Simple.java provides the Simple framework that one enters upon successful sign in.  It is merely a structure to showcase various components as they are built and will not be part of the final product.

Simple presents 3 menu items.  For now, only the 3rd, 'Use Abbot,' is important.  Use Abbot is implemented by FileManager which allows signed in users to build collections (up to a limit of 10 currently) of files to be processed.  These files are actually stored in /tmp/vicar/[slight_munge_of_user_email_address]/[collection_name_given_by_user]/ with two subdirectories; input and output.  FileManager calls on FileUpload to implement a simple utility for uploading a single file at a time.  FileDownload allows download of a single file at a time.  ZipUtil contains the utilies for FileManager to unzip/zip, ungzip/gzip, and untar/tar data files.


COCOON INSTALL 

To install vicar on your local cocoon install, you will need to create one directory for the vicar software and locate 3 others.  These 3 directories are expressed in build.xml as builddir, libdir, and corelibdir.  builddir is where ant will place the compiled .class files.  libdir is where cocoon will look for various jar files which are part of cocoon.  corelibdir is the path to core jar files which are found as part of tomcat in a tomcat based cocoon install, or as part of cocoon in a jetty based install.

If you have a jetty install (install which is started with the cocoon.sh command), these 3 directories will be found in your cocoon install's subdirectory build/webapp/WEB-INF/ (classes, lib, and lib/core, respectively).a  If you have a tomcat install, the first 2 directories will be in the cocoon directory which was created by the unpacking of the cocoon.war file.   For tomcat 7, this is in /var/lib/tomcat-7/webapps/webapp/.  The third directory will be part of the tomcat install.  For tomcat 7, this is in /usr/share/tomcat-7/.  Earlier versions of tomcat may have a different directory arrangement.

To install, you will need to adjust the paths for these directories in the build.xml file.

Once the paths are set corelibdir will be populated only by ant and corelibdir will not need any changes.  libdir will need the addition of four extra jar files.  The first is JOpenId-1.08.jar which can be downloaded from http://code.google.com/p/jopenid/.  This jar gives the ability to accept openid login from OpenSignin/OpenSignin.java.  The second jar is abbot-0.3.3-standalone.jar.  The third jar is commons-compress-1.3.jar which can be downloaded from http://commons.apache.org/compress/.  This jar enables the unpacking and packing of tar files in Core/ZipUtil.java.  The fourth is junit-4.10.jar which is needed for junit testing (for build.xml's junit target).  junit-4.10.jar can be found at https://github.com/KentBeck/junit/downloads.  (This 4th jar should probably be put outside of the cocoon directories but for the sake of uniform structure between my local install and that on abbot, it is currently in the libdir.  This is in part because there is already a junit.jar in /usr/share/junit/lib/ on abbot which appears to be an older version or otherwise incompatible.  It does not contain the org.junit packages.)

Before compiling, edit OpenSignin/OpenSignin.java to changed the hardcoded URL_BASE to the url at your install computer.  If you are running it on your own computer that should likely be http://127.0.0.1:8888 for a jetty install and http://127.0.0.1:8080 for a tomcat install.  To use the UploadServlet from Simple.html you will need to edit the iframe in Core/Simple.xsl to point the to the correct UploadServlet, either at 127.0.0.1 (localhost) or the system url where it is hosted.

If you want to change the location used for data files then edit BASE_USER_DIR in Core/FileManager.java.

Your cocoon sitemap.xmap file (in [cocoon_install]/build/webapp/ for jetty installs, in [tomcat_install]/webapps/cocoon/ for tomcat installs) will need a <map:pipeline> entry for the files in your created directory.  Something like;

        <map:match pattern="vicar/**">
                <map:mount check-reload="yes"
                                src="[your_home_dir]/vicar/"
                                uri-prefix="vicar" />
        </map:match>

This lets cocoon find your vicar specific sitemap.xmap and vicar's .xsl files.


I don't have tomcat 6 installed and am basing my info on abbot's tomcat 7 install.  Tomcat 7 may vary in directory structure from tomcat 6.
This is a crude install explanation for a yet primitive and brittle tool.  Please help me refine it with comments and suggestions.


OPERATION

The Feb 1 update of vicar lets a user upload input xml files, convert them using Abbot, and download the results.

Vicar is running on abbot at;

http://abbot.unl.edu:8080/cocoon/vicar/Core/Simple.html

It is intended to serve as a proof of concept for the final web product.  It is not pretty in form nor in code and needs significant refactoring and annotation.
It's purpose is not yet to be a design for vicar but to be a framework on which to display and test various components.  Vicar's useful form will be designed and built at a later time.

******


Vicar allows users to log in via google or yahoo.  Once in, the user will find three menu choices; Intro, Upload Files via HTML5, and Use Abbot.  For now, ignore the first two choices.  The Upload Files via HTML5 relies on a servlet and, for debugging purposes, it is not yet integrated with the Use Abbot functionality.  (Debugging cocoon generators and servlets concurrently would expand the complexity for development and testing). 

'Use Abbot' will take you to a page to display your uploaded collections.  To create a collection, click on 'Create New Collection.'  You will be asked to enter a collection name.  Enter any name containing only letters a-z and A-Z with no spaces (for now, this could be made more flexible in the future) and press Save.  You will then be asked to add files to this collection.  Click browse, select an input xml file, and press Upload.  (This only allows single file upload as the multiple upload facility is not yet integrated with this code).  Add as many files to the collection as you wish

You can also upload a zip file containing multiple xml files.  You will be presented with an 'unzip' link.  Click on the link and the contents of the zip file will then show in this collection.

You can click on 'Collections' to go to your list of collections.  You can click on a collection name to see its contents.  Click on a collection's red X to delete the collection and the files.

Once you have files in your collection you will see 3 green 'greater than' arrows.  Click on the arrows to invoke abbot.  Abbot will populate an output directory with the result of it's run.  If there are multiple files in the output, you will be given an option to package them into a single zip file.  Clicking on an individual xml file send it to your browser.  Use Ctrl click to 'Save Link As' and download the output file.  Clicking on the zip file should automaticall y give you an option to save the zip file.

The files are stored on abbot in /tmp/vicar/[slight_munge_of_your_email_addr]/[collection_name]/.  This path contains an input and output directory.

Please give it a test run.  Input files for now should not exceed 3MB.




Core contains the code to produce Simple.html which is the general framework.  OpenSignin allows users to sign in with their Yahoo or Google id.  This depends on the JOpenId-1.08.jar file from http://code.google.com/p/jopenid/ being in the cocoon install's WEB-INF/lib/ directory.
FileManager.java needs abbot-0.3.3-standalone.jar in WEB/lib/ directory.

